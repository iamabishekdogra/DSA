class linkedList {
  constructor(value) {
    this.head = {
      data: value,
      next: null,
    };
    this.tail = this.head;
    this.length = 1;
  }
  append(value) {
    const newNode = {
      data: value,
      next: null,
    };
    this.tail.next = newNode;
    this.tail = newNode;
    this.length++;
    return this;
  }
  prepend(value) {
    const newNode = {
      data: value,
      next: null,
    };
    newNode.next = this.head;
    this.head = newNode;
    this.length++;
    return this;
  }

  traversing(req) {
    let counter = 0;
    let currentNode = this.head;

    while (counter != req) {
      currentNode = currentNode.next;
      counter++;
    }
    return currentNode;
  }

  insert(index, value) {
    const newNode = {
      data: value,
      next: null,
    };
    const leaderNode = this.traversing(index - 1);
    const nextNode = leaderNode.next;
    leaderNode.next = newNode;
    newNode.next = nextNode;
  }
  print() {
    let current = this.head;
    while (current != null) {
      console.log(current.data);
      current = current.next;
    }
  }
}
const link = new linkedList(12);
link.append(14);
link.append(17);
link.append(19);
link.prepend(1);
link.insert(10, 11);
link.print();
console.log(link);
